import requests
import pytest
import os
import time
from unittest.mock import patch, Mock
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"


class TelegramBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API"""
    
    def __init__(self, token):
        self.token = token
        self.api_url = f"https://api.telegram.org/bot{token}"
    
    def send_message(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        url = f"{self.api_url}/sendMessage"
        payload = {"chat_id": chat_id, "text": text}
        response = requests.post(url, json=payload)
        return response
    
    def process_start_command(self, chat_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        welcome_message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç. –ö–∞–∫ –¥–µ–ª–∞?"
        return self.send_message(chat_id, welcome_message)
    
    def get_updates(self, offset=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram API"""
        url = f"{self.api_url}/getUpdates"
        if offset:
            url += f"?offset={offset}"
        response = requests.get(url)
        return response
    
    def process_task_question(self, chat_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ –±–æ—Ç–∞"""
        task_response = "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
        return self.send_message(chat_id, task_response)


class BotLogic:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–æ–º"""
    
    @staticmethod
    def process_message(message_text):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞"""
        message_lower = message_text.lower().strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        if message_lower == "/start":
            return "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç. –ö–∞–∫ –¥–µ–ª–∞?"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ
        if "–æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É" in message_lower and "—Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è" in message_lower:
            return "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
        if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "hello", "hi"]):
            if "–æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É" in message_lower:
                return "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
            return "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        
        # –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å."


class TelegramBotInteraction:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º (–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ + –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞)"""
    
    def __init__(self, token):
        self.bot = TelegramBot(token)
        self.bot_logic = BotLogic()
    
    def ask_question_and_get_response(self, chat_id, question):
        """
        –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:
        1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å
        2. –ë–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —Å–≤–æ—é –ª–æ–≥–∏–∫—É
        3. –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç
        """
        # –®–∞–≥ 1: –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: '{question}'")
        
        # –®–∞–≥ 2: –ë–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —Å–≤–æ—é –ª–æ–≥–∏–∫—É
        bot_response = self.bot_logic.process_message(question)
        print(f"ü§ñ –ë–æ—Ç –¥—É–º–∞–µ—Ç –∏ —Ä–µ—à–∞–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å: '{bot_response}'")
        
        # –®–∞–≥ 3: –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = self.bot.send_message(chat_id, bot_response)
        
        return {
            "question": question,
            "bot_response": bot_response,
            "api_response": response
        }


@pytest.mark.telega
def test_bot_responds_to_start_command():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –±–æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start"""
    # --- Arrange (–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞) ---
    bot = TelegramBot(BOT_TOKEN)
    
    # --- Act (–î–µ–π—Å—Ç–≤–∏–µ) ---
    response = bot.process_start_command(CHAT_ID)
    
    # --- Assert (–ü—Ä–æ–≤–µ—Ä–∫–∞) ---
    assert response.status_code == 200, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    
    response_data = response.json()
    assert response_data.get("ok") is True, "API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É"
    assert "text" in response_data.get("result", {}), "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç"
    
    sent_text = response_data["result"]["text"]
    assert "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" in sent_text, f"–û–∂–∏–¥–∞–ª—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–æ –ø–æ–ª—É—á–µ–Ω: {sent_text}"
    
    print(f"\n–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω. –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª: {sent_text}")


@pytest.mark.telega
@patch('requests.post')
def test_bot_start_command_with_mock(mock_post):
    """–¢–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º mock –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ Telegram API"""
    # --- Arrange (–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ mock) ---
    # –°–æ–∑–¥–∞–µ–º mock –æ—Ç–≤–µ—Ç –æ—Ç Telegram API
    mock_response = Mock()
    mock_response.status_code = 200
    mock_response.json.return_value = {
        "ok": True,
        "result": {
            "message_id": 123,
            "text": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç. –ö–∞–∫ –¥–µ–ª–∞?",
            "chat": {"id": int(CHAT_ID)},
            "date": int(time.time())
        }
    }
    mock_post.return_value = mock_response
    
    # --- Act (–î–µ–π—Å—Ç–≤–∏–µ) ---
    bot = TelegramBot(BOT_TOKEN)
    response = bot.process_start_command(CHAT_ID)
    
    # --- Assert (–ü—Ä–æ–≤–µ—Ä–∫–∞) ---
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ requests.post –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    mock_post.assert_called_once()
    call_args = mock_post.call_args
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
    expected_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    assert call_args[1]['json']['chat_id'] == CHAT_ID
    assert "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" in call_args[1]['json']['text']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    assert response.status_code == 200
    response_data = response.json()
    assert response_data["ok"] is True
    assert "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" in response_data["result"]["text"]
    
    print(f"\n–úock —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω. –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_data['result']['text']}")


@pytest.mark.telega
def test_telegram_api_connection():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
    # --- Arrange ---
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getMe"
    
    # --- Act ---
    response = requests.get(url)
    
    # --- Assert ---
    assert response.status_code == 200, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API"
    
    data = response.json()
    assert data.get("ok") is True, "API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É"
    assert "result" in data, "–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"
    assert data["result"].get("is_bot") is True, "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–æ—Ç—É"
    
    bot_info = data["result"]
    print(f"\n–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω. –ë–æ—Ç: {bot_info.get('first_name')} (@{bot_info.get('username')})")


@pytest.mark.telega
def test_bot_task_response():
    """
    –£–°–¢–ê–†–ï–í–®–ò–ô –¢–ï–°–¢ - –ù–ï –î–ï–õ–ê–ï–¢ –†–ï–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!
    –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—è –ª–æ–≥–∏–∫—É –±–æ—Ç–∞.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ test_real_bot_interaction_with_task_question –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ.
    """
    # --- Arrange (–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞) ---
    bot = TelegramBot(BOT_TOKEN)
    
    # --- Act (–î–µ–π—Å—Ç–≤–∏–µ) ---
    response = bot.process_task_question(CHAT_ID)
    
    # --- Assert (–ü—Ä–æ–≤–µ—Ä–∫–∞) ---
    assert response.status_code == 200, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –æ –∑–∞–¥–∞—á–µ"
    
    response_data = response.json()
    assert response_data.get("ok") is True, "API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É"
    assert "text" in response_data.get("result", {}), "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç"
    
    sent_text = response_data["result"]["text"]
    assert sent_text == "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", f"–û–∂–∏–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç '–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã', –Ω–æ –ø–æ–ª—É—á–µ–Ω: '{sent_text}'"
    
    print(f"\n‚ö†Ô∏è  –£–°–¢–ê–†–ï–í–®–ò–ô –¢–ï–°–¢ –ø—Ä–æ–π–¥–µ–Ω. –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª: '{sent_text}'")


@pytest.mark.telega
def test_real_bot_interaction_with_task_question():
    """
    –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º:
    1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ
    2. –ë–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —Å–≤–æ—é –ª–æ–≥–∏–∫—É
    3. –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
    """
    # --- Arrange (–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞) ---
    bot_interaction = TelegramBotInteraction(BOT_TOKEN)
    question = "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–æ —Å–≤–æ—é –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
    
    # --- Act (–î–µ–π—Å—Ç–≤–∏–µ) ---
    result = bot_interaction.ask_question_and_get_response(CHAT_ID, question)
    
    # --- Assert (–ü—Ä–æ–≤–µ—Ä–∫–∞) ---
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
    assert result["api_response"].status_code == 200, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ API"
    
    api_data = result["api_response"].json()
    assert api_data.get("ok") is True, "API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –±–æ—Ç–∞
    assert result["bot_response"] == "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", \
        f"–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å '–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã', –Ω–æ –æ—Ç–≤–µ—Ç–∏–ª: '{result['bot_response']}'"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–≥–∏–∫–µ –±–æ—Ç–∞
    sent_text = api_data["result"]["text"]
    assert sent_text == result["bot_response"], \
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–≥–∏–∫–µ –±–æ—Ç–∞: '{sent_text}' != '{result['bot_response']}'"
    
    print(f"\n‚úÖ –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ø—Ä–æ–π–¥–µ–Ω!")
    print(f"   üë§ –í–æ–ø—Ä–æ—Å: '{result['question']}'")
    print(f"   ü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: '{result['bot_response']}'")


@pytest.mark.telega
@patch('tests.api.test_telegram_conect.BotLogic.process_message')
def test_bot_logic_with_mock(mock_process_message):
    """
    –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º mock –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    # --- Arrange (–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ mock) ---
    mock_process_message.return_value = "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
    
    # --- Act (–î–µ–π—Å—Ç–≤–∏–µ) ---
    bot_logic = BotLogic()
    question = "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–æ —Å–≤–æ—é –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
    response = bot_logic.process_message(question)
    
    # --- Assert (–ü—Ä–æ–≤–µ—Ä–∫–∞) ---
    mock_process_message.assert_called_once_with(question)
    assert response == "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
    
    print(f"\nüé≠ Mock —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–π–¥–µ–Ω. –û—Ç–≤–µ—Ç: '{response}'")


@pytest.mark.telega
def test_bot_logic_various_questions():
    """
    –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏
    """
    bot_logic = BotLogic()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–æ–ø—Ä–æ—Å–∞ –æ –∑–∞–¥–∞—á–µ
    test_cases = [
        {
            "question": "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–æ —Å–≤–æ—é –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
            "expected": "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
        },
        {
            "question": "–ö–∞–∫–∞—è —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è?",
            "expected": "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
        },
        {
            "question": "–°–∫–∞–∂–∏ –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
            "expected": "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
        },
        {
            "question": "/start",
            "expected": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç. –ö–∞–∫ –¥–µ–ª–∞?"
        },
        {
            "question": "–ü—Ä–∏–≤–µ—Ç",
            "expected": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        },
        {
            "question": "–ß—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ",
            "expected": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å."
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        response = bot_logic.process_message(test_case["question"])
        assert response == test_case["expected"], \
            f"–¢–µ—Å—Ç {i}: –û–∂–∏–¥–∞–ª—Å—è '{test_case['expected']}', –ø–æ–ª—É—á–µ–Ω '{response}'"
        print(f"   ‚úÖ –¢–µ—Å—Ç {i}: '{test_case['question'][:30]}...' ‚Üí '{response}'")
    
    print(f"\nüß™ –í—Å–µ {len(test_cases)} —Ç–µ—Å—Ç–æ–≤ –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")


@pytest.mark.telega
@patch('requests.post')
def test_bot_task_response_with_mock(mock_post):
    """–¢–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º mock –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –æ –µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ"""
    # --- Arrange (–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ mock) ---
    mock_response = Mock()
    mock_response.status_code = 200
    mock_response.json.return_value = {
        "ok": True,
        "result": {
            "message_id": 124,
            "text": "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
            "chat": {"id": int(CHAT_ID)},
            "date": int(time.time())
        }
    }
    mock_post.return_value = mock_response
    
    # --- Act (–î–µ–π—Å—Ç–≤–∏–µ) ---
    bot = TelegramBot(BOT_TOKEN)
    response = bot.process_task_question(CHAT_ID)
    
    # --- Assert (–ü—Ä–æ–≤–µ—Ä–∫–∞) ---
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ requests.post –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    mock_post.assert_called_once()
    call_args = mock_post.call_args
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞
    assert call_args[1]['json']['chat_id'] == CHAT_ID
    assert call_args[1]['json']['text'] == "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    assert response.status_code == 200
    response_data = response.json()
    assert response_data["ok"] is True
    assert response_data["result"]["text"] == "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
    
    print(f"\n–úock —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω. –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: '{response_data['result']['text']}'")
